# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import time

from playsound import playsound
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QDialog
from os import getcwd
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import process
from keras.models import load_model
from keras.utils import np_utils
import numpy as np
# from recorder_ui import Ui_Dialog
from recorder1 import Recorder

class Ui_Dialog(QMainWindow):
    def __init__(self):
        super(Ui_Dialog, self).__init__()

        self.setupUi(self)
        self.retranslateUi(self)
        self.slot_init() # 槽函数设置

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(497, 246)
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(80, 100, 111, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(310, 100, 101, 41))
        self.pushButton_2.setObjectName("pushButton_2")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        # self.solt()
        #
    def slot_init(self):
        print(1)
        self.pushButton.clicked.connect(self.fun)
        self.pushButton_2.clicked.connect(self.fun1)
    def fun(self):
        rec = Recorder()
        rec.positive()

    def fun1(self):
        ui.show()
        print(ui.path)
        ui.path = './1_1.wav'
        print(ui.path)
        ui1.hide()


    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.pushButton.setText(_translate("Dialog", "开始录音"))
        self.pushButton_2.setText(_translate("Dialog", "退出"))


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()

        self.setupUi(self)
        self.retranslateUi(self)
        self.slot_init() # 槽函数设置

        self.model_path = None # 模型路径
        self.model = load_model('./model.h5')
        self.path = './1_1.wav'
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 920)
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(16)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("#MainWindow{background-image: url(source/1.png);}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(510, 10, 281, 61))
        font = QtGui.QFont()
        font.setFamily("Agency FB")
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("background-color: rgb(207, 242, 252);")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 90, 411, 411))
        # self.label_2.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(430, 90, 411, 411))
        # self.label_3.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(850, 90, 411, 411))
        # self.label_4.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(255, 255, 255, 255), stop:1 rgba(255, 255, 255, 255));")
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(120, 530, 151, 51))
        self.pushButton.setStyleSheet("background-color: rgb(207, 242, 252);")
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(560, 530, 151, 51))
        self.pushButton_2.setStyleSheet("background-color: rgb(207, 242, 252);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(1000, 520, 151, 51))
        self.pushButton_3.setStyleSheet("background-color: rgb(207, 242, 252);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(20, 650, 1241, 131))
        self.textBrowser.setStyleSheet("background-color: rgb(207, 242, 252);")
        self.textBrowser.setObjectName("textBrowser")
        font = QtGui.QFont()
        font.setFamily("Arial")  # 括号里可以设置成自己想要的其它字体
        font.setPointSize(16)
        self.textBrowser.setFont(font)

        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setGeometry(QtCore.QRect(70, 830, 1141, 61))
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.pushButton_4 = QtWidgets.QPushButton(self.splitter)
        self.pushButton_4.setStyleSheet("background-color: rgb(207, 242, 252);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.splitter)
        self.pushButton_5.setStyleSheet("background-color: rgb(207, 242, 252);")
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.splitter)
        self.pushButton_6.setStyleSheet("background-color: rgb(207, 242, 252);")
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_7 = QtWidgets.QPushButton(self.splitter)
        self.pushButton_7.setStyleSheet("background-color: rgb(207, 242, 252);")
        self.pushButton_7.setObjectName("pushButton_7")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "语音情感识别系统"))
        self.pushButton.setText(_translate("MainWindow", "Display Waveform"))
        self.pushButton_2.setText(_translate("MainWindow", "Display Waveform"))
        self.pushButton_3.setText(_translate("MainWindow", "Display Waveform"))
        self.pushButton_4.setText(_translate("MainWindow", "上传语音"))
        self.pushButton_5.setText(_translate("MainWindow", "录制语音"))
        self.pushButton_6.setText(_translate("MainWindow", "识别情感"))
        self.pushButton_7.setText(_translate("MainWindow", "退出系统"))


    def slot_init(self): # 定义槽函数
        self.pushButton.clicked.connect(self.display_waveform)
        self.pushButton_2.clicked.connect(self.display_feature)
        self.pushButton_3.clicked.connect(self.display_feature1)
        self.pushButton_4.clicked.connect(self.choose_file)
        # self.pushButton_5.clicked.connect(self.play_video)
        self.pushButton_6.clicked.connect(self.start_recongniton)
        self.pushButton_7.clicked.connect(self.closeEvent)

    def display_waveform(self):
        to_flatten = False
        process.get_feature_vector_from_mfcc(self.path, flatten=to_flatten)
        process.get_mel(self.path)
        self.label_2.setScaledContents(True)  # 设置图像自适应界面大小
        self.label_2.setPixmap(QtGui.QPixmap(r'D:\python_project\speech-emotion-recognitio\speech-emotion-recognition-master\test\wave.jpg'))


    def display_feature(self):
        self.label_3.setScaledContents(True)  # 设置图像自适应界面大小
        self.label_3.setPixmap(QtGui.QPixmap(
            r'D:\python_project\speech-emotion-recognitio\speech-emotion-recognition-master\test\Spectrogram.jpg'))

    def display_feature1(self):
        self.label_4.setScaledContents(True)  # 设置图像自适应界面大小
        self.label_4.setPixmap(QtGui.QPixmap(
            r'D:\python_project\speech-emotion-recognitio\speech-emotion-recognition-master\test\MFCC.jpg'))

    def start_recongniton(self):
        self.textBrowser.append('正在识别中...')

        sample = process.get_feature_vector_from_mfcc(self.path, flatten=False)

        sample = np.expand_dims(sample, axis=2)
        start = time.time()
        result = self.model.predict(np.array([sample]))
        end = time.time()-start

        result = np.argmax(result)
        if result==0:
            self.textBrowser.append('识别结果：angry\n用时：%.2f' %end)
        elif result == 1:
            self.textBrowser.append('识别结果：fear\n用时：%.2f' % end)
        elif result == 2:
            self.textBrowser.append('识别结果：happy\n用时：%.2f' % end)
        elif result == 3:
            self.textBrowser.append('识别结果：neutral\n用时：%.2f' % end)
        elif result == 4:
            self.textBrowser.append('识别结果：sad\n用时：%.2f' % end)
        elif result == 5:
            self.textBrowser.append('识别结果：surprise\n用时：%.2f' % end)

            print(end)




    def play_video(self):
        # playsound(self.path)
        self.hide()


        ui1 = Ui_Dialog()
        ui1.show()
        exit(app.exec_())




    def choose_file(self):
        fileName_choose, filetype = QFileDialog.getOpenFileName(
            self.centralwidget, "选取图片文件",
            '../data1',  # 起始路径
            "(*.wav)")  # 文件类型
        self.path = fileName_choose  # 保存路径

        if fileName_choose != '':
            self.textBrowser.append(fileName_choose + '文件已选中')

            self.label_2.clear()
            self.label_3.clear()
            self.label_4.clear()
        else:
            self.textBrowser.append('文件未选中')

    def closeEvent(self, event):
        ok = QtWidgets.QPushButton()
        cancel = QtWidgets.QPushButton()
        msg = QtWidgets.QMessageBox(QtWidgets.QMessageBox.Warning, u'退出', u'是否退出！')
        msg.addButton(ok, QtWidgets.QMessageBox.ActionRole)
        msg.addButton(cancel, QtWidgets.QMessageBox.RejectRole)
        ok.setText(u'确定')
        cancel.setText(u'取消')
        # print(type(msg.exec_()))
        if msg.exec_() == 0:
            app.quit()
        else:
            pass

def uifun1(ui,ui1):
    ui.hide()
    ui1.show()

def uifun2(ui,ui1,vpath):
    ui.show()
    ui1.hide()
    vpath = './1_1.wav'
    return vpath

if __name__ == '__main__':
    app = QApplication(sys.argv)


    ui = Ui_MainWindow()

    ui.show()

    ui1 = Ui_Dialog()
    ui.pushButton_5.clicked.connect(lambda:uifun1(ui,ui1))
    # ui1.pushButton_2.clicked.connect(lambda:uifun2(ui,ui1,ui.path))
    exit(app.exec_())

